@model Eskul.Models.SubjectAssignments
@{

    var listmodel = Model.Assignments;
}
<br />
<div class="col-md-12">
    <partial name="_delete"/>
    <input type="hidden" asp-for="streamCode" name="streamCode" id="streamCode">

    <div class="modal fade" id="modal-lg">
        <div class="modal-dialog modal-lg">
            <div class="modal-content box box-primary">
                <div class="modal-header">
                    <h4 class="modal-title">Add/Edit Assignment</h4>
                    <button type="button" class="close" id="closeModalBtn" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <form asp-action="Create" class="needs-validation" novalidate>
                        <div class="col-md-12">
                            <div class="row">
                                <input type="hidden" name="AssignmentId" id="AssignmentId" asp-for="@Model.AssignmentId" />
                                <input type="hidden" asp-for="StatusId" />
                                
                                <div class="col-md-4">
                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <div id="input-type" class="row">
                                                <div class="col-sm-4">
                                                    <label class="radio-inline" style="font-weight:normal;">
                                                        <input name="Levelo" class="Core" id="input-type-student" value="O" type="radio" onchange="populateDropdownm()" checked>
                                                        O-Level
                                                    </label>
                                                </div>
                                                <div class="col-sm-4">
                                                    <label class="radio-inline" style="font-weight:normal;">
                                                        <input name="Levelo" class="finetype" id="input-type-student" value="A" type="radio" onchange="populateDropdownm()">A-Level
                                                    </label>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label style="font-weight: normal !important;" asp-for="Class" class="control-label"></label>
                                        @Html.DropDownList("Class", (IEnumerable<SelectListItem>)ViewBag.Classes, new { @class = "select",style = "width: 100%;",id="Classm",name="Class",required="required"})
                                        <span id="classmSpinner" class="spinner-border text-warning spinner-border-sm" style="position: absolute; top: 50%; right: 28px; display: none;"></span>
                                            <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>
                                <div class="col-md-4">

                                    <div class="form-group">
                                        <label for="Term" style="font-weight: normal !important;">Academic Term</label>
                                        @Html.DropDownListFor(m => m.Term, new List<SelectListItem>
                                        {       new SelectListItem{Text="Term One", Value="1"},
                                        new SelectListItem{Text="Term Two", Value="2"},new SelectListItem{Text="Term Three", Value="3"}},"Select",htmlAttributes:new { @class = "select",style = "width: 100%;",id="Term",name="Term",required="required"})
                                        <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="SubjectCode" class="control-label" style="font-weight: normal !important;">Subject</label>
                                        @Html.DropDownList("SubjectCode", (IEnumerable<SelectListItem>)ViewBag.Subjects, new { @class = "select",style = "width: 100%;",id="SubjectCodem",name="SubjectCode",required="required"})
                                        <span id="subjectmSpinner" class="spinner-border text-warning spinner-border-sm" style="position: absolute; top: 37%; right: 28px; display: none;"></span>
                                            <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="TopicId" class="control-label topic" style="font-weight: normal !important;">Topic</label>
                                        @Html.DropDownList("TopicId", (IEnumerable<SelectListItem>)ViewBag.Topics, new { @class = "select",style = "width: 100%;",id="TopicId",name="TopicId",required="required"})
                                         <span id="topicSpinner" class="spinner-border text-warning spinner-border-sm" style="position: absolute; top: 50%; right: 28px; display: none;"></span>
                                            <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="Description" class="control-label" style="font-weight: normal !important;"></label>
                                        <textarea asp-for="Description" id="Description" name="Description" class="form-control form-control-sm" autocomplete="off"></textarea>
                                    </div>

                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label asp-for="competencyId" class="control-label" style="font-weight: normal !important;">Competency</label>
                                        @Html.DropDownList("competencyId", (IEnumerable<SelectListItem>)ViewBag.TopicComps, new { @class = "select",style = "width: 100%;",id="competencyId",name="competencyId",required="required"})
                                        <span id="competencySpinner" class="spinner-border text-warning spinner-border-sm" style="position: absolute; top: 50%; right: 28px; display: none;"></span>
                                            <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer justify-content-center">

                            <input type="submit" value="Save" class="btn btn-block btn-sm mybtnlg" style="width:200px;" onclick="sendPostRequest()" />

                        </div>
                    </form>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <div class="card card-outline card-default">
        <div class="card-body">
            <div class="col-md-12">

                <div class="card card-outline card-default box box-primary">
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <form asp-action="LoadAsignments" id="myform" class="needs-validation" novalidate>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="Year" style="font-weight: normal !important;">Year</label>
                                        <input asp-for="Year" class="form-control form-control-sm" style="width:100px;" required autocomplete="off" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group row">
                                        <div class="col-sm-12">
                                            <div id="input-type" class="row">
                                                <div class="col-sm-4">
                                                    <label class="radio-inline" style="font-weight:normal;">

                                                        <input name="Level" class="Core" id="input-type-student" value="O" type="radio" checked="checked" onchange="populateDropdown()">O-Level

                                                    </label>
                                                </div>
                                                <div class="col-sm-4">
                                                    <label class="radio-inline" style="font-weight:normal;">
                                                        <input name="Level" class="finetype" id="input-type-student" value="A" type="radio" onchange="populateDropdown()">A-Level
                                                    </label>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="Class" class="control-label" style="font-weight: normal !important;"></label><small class="req"> *</small>
                                        @Html.DropDownList("Class", (IEnumerable<SelectListItem>)ViewBag.Classes, new { @class = "select",style = "width: 100%;",id="Class",name="Class",required = "required"})
                                        <span id="classSpinner" class="spinner-border text-warning spinner-border-sm" style="position: absolute; top: 50%; right: 28px; display: none;"></span>
                                            <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>

                                @* <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="Stream" class="control-label" style="font-weight: normal !important;">Stream</label>
                                        @Html.DropDownList("Stream", (IEnumerable<SelectListItem>) ViewBag.Streams, new { @class = "select",style = "width: 100%;",id="Stream",name="Stream"})

                                    </div>
                                </div> *@
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label for="Term" style="font-weight: normal !important;">Academic Term</label><small class="req"> *</small>
                                        @Html.DropDownListFor(m => m.Term, new List<SelectListItem>
                                        {       new SelectListItem{Text="Term One", Value="1"},
                                        new SelectListItem{Text="Term Two", Value="2"},new SelectListItem{Text="Term Three", Value="3"}},htmlAttributes:new { @class = "select",style = "width: 100%;",id="Term",name="Term",required = "required"})
                                        <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>
                               
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label asp-for="SubjectCode" class="control-label" style="font-weight: normal !important;">Subject</label><small class="req"> *</small>
                                        @Html.DropDownList("SubjectCode", (IEnumerable<SelectListItem>)ViewBag.Subjects, new { @class = "select", style = "width: 100%;", id = "SubjectCode", name = "SubjectCode", required = "required" })
                                        <span id="subjectSpinner" class="spinner-border text-warning spinner-border-sm" style="position: absolute; top: 50%; right: 28px; display: none;"></span>
                                            <div class="invalid-feedback">This Field is Required</div>
                                    </div>
                                </div>


                                <div class="col-md-4">
                                    <div class="form-group">
                                        <input type="submit" value="Search" class="btn btn-block btn-sm mybtnlg" />
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="box box-primary">
                    <div class="card-body">
                        @*  <partial name="_AssignmentSave" />*@
                        <p>
                            <a id="newParentButton" class="btn btn-sm mybtnsm" data-toggle="modal" data-target="#modal-lg"><i class="fa fa-plus"></i>&nbsp; Add Assignment</a>
                        </p>
                        <table id="example2" class="table table-bordered table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>
                                        Topic
                                    </th>
                                    <th>
                                        Competency
                                    </th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (listmodel != null)
                                {
                                    @foreach (var item in listmodel)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.TopicName)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Competency)
                                            </td>
                                            <td>
                                                <button id="editButton" class="btn btn-xs btn-primary" data-id="@item.AssignmentId" asp-route-id="@item.AssignmentId" onclick="loadEditModal(this)">Edit</button>
                                                <a id="Addmarks" asp-action="AssignMarks" class="btn btn-xs btn-warning" asp-route-classId="@item.Class" asp-route-assignmentId="@item.AssignmentId">Add Marks</a>
@*                                                 <button class="btn btn-xs btn-danger " id="delete" data-id="@item.AssignmentId" data-toggle="modal" data-target="#modal-info" onclick="del('@item.AssignmentId')" data-action="Delete">Del</button>
 *@
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-centere">
                                            No Record Found
                                        </td>

                                    </tr>
                                }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/Jquery.min.3.6.0.js"></script>

<script>
    function populateDropdownm() {
        var levelo = document.querySelector('input[name="Levelo"]:checked').value;
        var baseUrl = window.location.protocol + "//" + window.location.host;
        var pathName = window.location.pathname;
        if (pathName.charAt(0) === '/') {
            pathName = pathName.slice(1);
        }
        var fullUrl = baseUrl + '/' + pathName;

        var final = fullUrl.replace('Index', '').replace('Assignments', 'Assignments/').replace('Assignments//', 'Assignments/');
        console.log('final Url levelo', final);
        $('#classmSpinner').show();
        var xhr = new XMLHttpRequest();
        xhr.open('GET', final + 'ClassByLevel?level=' + levelo);
        xhr.onload = function () {
            if (xhr.status === 200) {
                var values = JSON.parse(xhr.responseText);
                var hasClasses = values.length > 0;
                var dropdown1 = $('#Classm');
                dropdown1.empty();
                dropdown1.append('<option value="">Select</option>');
                if (hasClasses) {
                    for (var i = 0; i < values.length; i++) {
                        dropdown1.append('<option value="' + values[i].classcode + '">' + values[i].Name + '</option>');
                    }
                } else {
                    dropdown1.append('<option disabled>No Classes Available</option>');
                }
                dropdown1.val('').trigger('change');
                $('#classmSpinner').hide();
                var dropdown5 = $('#TopicId');
                dropdown5.empty();
                dropdown5.append('<option value="">Select</option>');
                dropdown5.val('').trigger('change');
                var dropdown6 = $('#competencyId');
                dropdown6.empty();
                dropdown6.append('<option value="">Select</option>');
                dropdown6.val('').trigger('change');
                
                $('#subjectmSpinner').show();
                var xhr2 = new XMLHttpRequest();

                xhr2.open('GET', final + 'SubjectByLevel?level=' + levelo);
                xhr2.onload = function () {
                    if (xhr2.status === 200) {
                        var subjects = JSON.parse(xhr2.responseText);
                        var dropdown2 = $('#SubjectCodem');
                        dropdown2.empty();
                        dropdown2.append('<option value="">Select</option>');

                        if (subjects !== null && subjects.length > 0) {
                            for (var i = 0; i < subjects.length; i++) {
                                dropdown2.append('<option value="' + subjects[i].Subjectcode + '">' + subjects[i].Subjectname + '</option>');
                            }
                        } else {
                            dropdown2.append('<option disabled>No Subjects Available</option>');
                        }
                        dropdown2.val('').trigger('change');
                        $('#subjectmSpinner').hide();
                    }
                };
                xhr2.send();
            }
        };
        xhr.send();
    }
</script>
<script>
    $(function () {
        $('#SubjectCodem').change(function () {
            var Classm = document.getElementById('Classm').value;
            var yearValue = new Date().getFullYear();
            console.log(yearValue);
            var selectedSubject = document.getElementById('SubjectCodem').value;
            console.log('selectedSubject', selectedSubject);
            console.log('Classm', Classm);
            console.log('yearValue', yearValue);
            var baseUrl = window.location.protocol + "//" + window.location.host;
            var pathName = window.location.pathname;
            if (pathName.charAt(0) === '/') {
                pathName = pathName.slice(1);
            }
            var fullUrl = baseUrl + '/' + pathName;
            var final = fullUrl.replace('Index', '').replace('Assignments', 'Assignments/').replace('Assignments//', 'Assignments/');
            console.log('final is on get  topic', final);
            var dropdown5 = $('#TopicId');
            dropdown5.empty();
            dropdown5.append('<option value="">Select</option>');
            dropdown5.val('').trigger('change');
            var dropdown6 = $('#competencyId');
            dropdown6.empty();
            dropdown6.append('<option value="">Select</option>');
            dropdown6.val('').trigger('change');
            $('#topicSpinner').show();
            var xhr = new XMLHttpRequest();
            xhr.open('GET', final + 'TopicBySubject?Year=' + yearValue + '&ClassId=' + Classm + '&SubCode=' + selectedSubject);
            xhr.onload = function () {
                if (xhr.status === 200) {
                    var streamed1 = JSON.parse(xhr.responseText);
                    var Streamed = streamed1.length > 0;
                    var dropdown2 = document.getElementById('TopicId');
                    dropdown2.innerHTML = '';
                    dropdown2.append('<option value="">Select</option>');
                    if (Streamed) {
                        for (var i = 0; i < streamed1.length; i++) {
                            var option = document.createElement('option');
                            option.value = streamed1[i].TopicId;
                            option.text = streamed1[i].TopicName;
                            dropdown2.appendChild(option);
                        }
                    } else {
                        var option = document.createElement('option');
                        option.text = 'No Topics Added';
                        option.disabled = true;
                        dropdown2.appendChild(option);
                    }
                }
                $('#topicSpinner').hide();
                // else {
                //     var dropdown2 = document.getElementById('TopicId');
                //     dropdown2.innerHTML = '<option disabled>An error occurred</option>';
                //     dropdown2.disabled = true;
                // }
            };
            xhr.send();
        });
    });
</script>

<script>
    function populateComments() {
        var selectedTopic = document.getElementById('TopicId').value;
        console.log(selectedTopic);
        var baseUrl = window.location.protocol + "//" + window.location.host;
        var pathName = window.location.pathname;
        if (pathName.charAt(0) === '/') {
            pathName = pathName.slice(1);
        }
        var fullUrl = baseUrl + '/' + pathName;
        var final = fullUrl.replace('Index', '').replace('Assignments', 'Assignments/').replace('Assignments//', 'Assignments/');
        console.log('final is on topic competence', final);
        var dropdown6 = $('#competencyId');
        dropdown6.empty();
        dropdown6.append('<option value="">Select</option>');
        dropdown6.val('').trigger('change');
        $('#competencySpinner').show();
        var xhr = new XMLHttpRequest();
        xhr.open('GET', final + 'CompetencyByTopic?id=' + selectedTopic);
        xhr.onload = function () {
            if (xhr.status === 200) {
                var streamed = JSON.parse(xhr.responseText);
                var Streamed = streamed.length > 0;
                var dropdown = document.getElementById('competencyId');
                dropdown.innerHTML = '';

                if (Streamed) {
                    for (var i = 0; i < streamed.length; i++) {
                        var option = document.createElement('option');
                        option.value = streamed[i].CompetencyId;
                        option.text = streamed[i].Competency;
                        dropdown.appendChild(option);
                    }
                } else {
                    var option = document.createElement('option');
                    option.text = 'No Competency Added';
                    option.disabled = true;
                    dropdown.appendChild(option);
                    $('#competencySpinner').hide();
                }
            } else {
                // var dropdown = document.getElementById('competencyId');
                // dropdown.innerHTML = '<option disabled>An error occurred</option>';
                // dropdown.disabled = true;
            }
            $('#competencySpinner').hide();
        };
        xhr.send();
    }

    $(function () {
        $('#TopicId').change(function () {
            populateComments();
        });
    });
</script>
<script>
    function populateDropdown() {
        var level = document.querySelector('input[name="Level"]:checked').value;
        var baseUrl = window.location.protocol + "//" + window.location.host;
        var pathName = window.location.pathname;
        if (pathName.charAt(0) === '/') {
            pathName = pathName.slice(1);
        }
        var fullUrl = baseUrl + '/' + pathName;
        var final = fullUrl.replace('Index', '').replace('Assignments', 'Assignments/').replace('Assignments//', 'Assignments/');
        $('#classSpinner').show();
        var xhr = new XMLHttpRequest();
        xhr.open('GET', final + 'ClassByLevel?level=' + level);
        xhr.onload = function () {
            if (xhr.status === 200) {
                var values = JSON.parse(xhr.responseText);
                var hasClasses = values.length > 0;
                var dropdown1 = $('#Class');
                dropdown1.empty();
                dropdown1.append('<option value="">Select</option>');
                if (hasClasses) {
                    for (var i = 0; i < values.length; i++) {
                        dropdown1.append('<option value="' + values[i].classcode + '">' + values[i].Name + '</option>');
                    }
                } else {
                    dropdown1.append('<option disabled>No Classes Available</option>');
                }
                dropdown1.val('').trigger('change');
                $('#classSpinner').hide();
                $('#subjectSpinner').show();

                var xhr2 = new XMLHttpRequest();
                xhr2.open('GET', final + 'SubjectByLevel?level=' + level);
                xhr2.onload = function () {
                    if (xhr2.status === 200) {
                        var subjects = JSON.parse(xhr2.responseText);
                        var dropdown2 = $('#SubjectCode');
                        dropdown2.empty();
                        dropdown2.append('<option value="">Select</option>');

                        if (subjects !== null && subjects.length > 0) {
                            for (var i = 0; i < subjects.length; i++) {
                                dropdown2.append('<option value="' + subjects[i].Subjectcode + '">' + subjects[i].Subjectname + '</option>');
                            }
                        } else {
                            dropdown2.append('<option disabled>No Subjects Available</option>');
                        }
                        dropdown2.val('').trigger('change');
                        $('#subjectSpinner').hide();
                    }
                };
                xhr2.send();

            }
        };
        xhr.send();
    }
</script>

<script>

    function populateModalFields(data) {
       
        $('#Term').val(data.term);
        $('#Classm').val(data.class);
        $('#SubjectCodem').val(data.subjectCode);
        $('#AssignmentId').val(data.assignmentId);
        $('#SubjectCodem').trigger('change');

        $('#Description').val(data.description);
        var topicId = data.topicId.toString();
        var topicName = data.topicName;
        $('#TopicId').append('<option value="' + topicId + '" selected>' + topicName + '</option>');
        $('#TopicId').val(topicId).trigger('change');
        var competencyId = data.competencyId;
        var competency = data.competency;
        $('#competencyId').val(null).trigger('change');
        $('#competencyId').append('<option value="' + competencyId + '" selected>' + competency + '</option>');
        $('#competencyId').val(competencyId).trigger('change');
    }
    function loadEditModal(button) {
        var baseUrl = window.location.protocol + "//" + window.location.host;
        var pathName = window.location.pathname;
        if (pathName.charAt(0) === '/') {
            pathName = pathName.slice(1);
        }
        var fullUrl = baseUrl + '/' + pathName;
        var final = fullUrl.replace('Index', '');
        var projectId = $(button).data('id');
        $.ajax({
            url: final+'/Edit/' + projectId,
            dataType: 'json',
            success: function (data) {
                console.log('data', data);

                populateModalFields(data);
                $('#modal-lg').modal('show');
            },
            error: function (error) {
                console.log(error);
            }
        });
    }
    $(document).ready(function () {
    });
</script>
<script>
    $(function () {
        var storedStreamCode = localStorage.getItem('streamCode');
        if (storedStreamCode) {
            $('#streamCode').val(storedStreamCode);
        }
        $('#Stream').change(function () {
            var selectedStreamCode = $(this).val();
            $('#streamCode').val(selectedStreamCode);
            localStorage.setItem('streamCode', selectedStreamCode);
        });
    });
</script>
<script>
    function populateStreamDropdown() {
        var selectedClass = document.getElementById('Class').value;
        var baseUrl = window.location.protocol + "//" + window.location.host;
        var pathName = window.location.pathname;
        if (pathName.charAt(0) === '/') {
            pathName = pathName.slice(1);
        }
        var fullUrl = baseUrl + '/' + pathName;
        var final = fullUrl.replace('/Index', '');
        console.log('fullurl', final);
        var xhr = new XMLHttpRequest();
        xhr.open('GET', final + '/StreamsByClass?classs=' + selectedClass);
        xhr.onload = function () {
            if (xhr.status === 200) {
                var streamedClasses = JSON.parse(xhr.responseText);
                var hasStreamedClasses = streamedClasses.length > 0;
                var dropdown = $('#Stream');
                dropdown.empty();
                dropdown.append('<option value="0">Select</option>');

                if (hasStreamedClasses) {
                    for (var i = 0; i < streamedClasses.length; i++) {
                        dropdown.append('<option value="' + streamedClasses[i].StreamId + '">' + streamedClasses[i].Name + '</option>');
                    }
                } else {
                    dropdown.append('<option disabled>Class Not Streamed</option>');
                }
                dropdown.val('0').trigger('change');
            } else {
                var dropdown = $('#Stream');
                dropdown.empty().append('<option disabled>An error occurred</option>').prop('disabled', true);
            }
        };
        xhr.send();
    }

    $(function () {
        $('#Class').change(function () {
            populateStreamDropdown();
        });
    });

</script>
<script>
    $(function () {
        $('#Addmarks').click(function (e) {
            e.preventDefault();
            var streamCodeValue = $('#streamCode').val();
            var href = $(this).attr('href');
            var regex = /\?/;
            var updatedHref = href + (regex.test(href) ? '&' : '?') + 'streamCode=' + streamCodeValue;
            $(this).attr('href', updatedHref);
            window.location.href = updatedHref;
        });
    });
</script>
<script src="~/js/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('#closeModalBtn').click(function () {
            $('#modal-lg').find('form')[0].reset();
            $('.select').val('').trigger('change'); // Clear all dropdowns with class 'select'
            $('.select2-chosen').empty();
            $('.select2-chosen').append('<option value="">Select</option>');
        });
    });


</script>







