@model Eskul.Models.subject
@{
    ViewData["Title"] = "Home Page";
}
@{
   
    var genderDistributionJson = TempData["GenderDistribution"]?.ToString() ?? "[]";
    var genderDistribution = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic[]>(genderDistributionJson);
}
@{
    var classDistributionJson = TempData["ClassDistribution"]?.ToString() ?? "[]";
    var classDistribution = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic[]>(classDistributionJson);
        }
<br />
<style>
    .info-box {
        box-shadow: 0 0 1px rgba(0,0,0,.125), 0 1px 3px rgba(0,0,0,.2);
        border-radius: 0.25rem;
        background-color: #fff;
        display: -ms-flexbox;
        display: flex;
        margin-bottom: 1rem;
        min-height: 70px;
        padding: 0.5rem;
        position: relative;
        width: 100%;
        height: 20px;
    }
    .info-box .info-box-icon {
    border-radius: 0.25rem;
    -ms-flex-align: center;
    align-items: center;
    display: -ms-flexbox;
    display: flex;
    font-size: 1.875rem;
    -ms-flex-pack: center;
    justify-content: center;
    text-align: center;
    width: 50px;
}
</style>
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon bg-info elevation-1"><i class="fas fa-users" style="color:azure;"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Total Students</span>
                        <span class="info-box-number" id="StudentCount">@TempData["studentCount"]</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-chalkboard-teacher" style="color:azure;"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Teaching Staff</span>
                        <span class="info-box-number" id="TeacherCount">@TempData["Teachingcount"]</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <!-- fix for small devices only -->
            <div class="clearfix hidden-md-up"></div>
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-chalkboard-teacher" style="color:azure;"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Non-Teaching Staff</span>
                        <span class="info-box-number" id="TeacherCount">@TempData["Noncount"]</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="info-box">
                    <span class="info-box-icon bg-success elevation-1"><i class="fas fa-users" style="color:azure;"></i></span>
                    <div class="info-box-content">
                        <span class="info-box-text">Total Parents</span>
                        <span class="info-box-number" id="ParentCount">@TempData["ParentCount"]</span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
            <!-- /.col -->
        </div>

        <!-- /.row -->
        <!-- Main row -->
        <div class="row">
            <!-- Left col -->
            <div class="col-md-8">
                <!-- MAP & BOX PANE -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title" style="font-weight:bold;">Student Population By Class</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body p-0">
                        <div class="d-md-flex">
                            <div class="p-1 flex-fill" style="overflow: hidden">
                                <!-- Chart will be created here -->
                                <div class="chart">
                                    <canvas id="StudentPopulationByClass" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                                </div>
                            </div>
                        </div><!-- /.d-md-flex -->
                    </div>
                    <!-- /.card-body -->
                </div>
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title" style="font-weight:bold;">Student Population By Class Stream</h3>
                        <div class="card-tools">
                            <div class="form-group">
                                <label for="classFilter">Filter by Class:</label>
                                <select id="classFilter" class="form-control">
                                    <option value="all">All</option>
                                    <option value="1">Senior One</option>
                                    <option value="2">Senior Two</option>
                                    <option value="3">Senior Three</option>
                                    <option value="4">Senior Four</option>
                                    <option value="5">Senior Five</option>
                                    <option value="6">Senior Six</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart">
                            <canvas id="StudentPopulationByClassStream" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                        </div>
                    </div>
                </div>
               @*  <div class="card box box-primary">
                    <div class="card-header">
                        <h3 class="card-title">Student Marks by Exam</h3>
                        <div class="card-tools">
                        <div class="form-group">
                            <label for="examDropdown">Filter By Exam:</label>
                            <select id="examDropdown" class="form-control">
                                <option value="EOT">EOT</option>
                                <option value="BOT">BOT</option>
                                <option value="MID">MID</option>
                            </select>
                        </div>
                        </div>
                    </div>
                    <div class="card-body">
                        
                        <div class="chart">
                            <canvas id="marksChart" style="min-height: 400px; height: 400px; max-height: 400px; max-width: 100%;"></canvas>
                        </div>
                    </div>
                </div> *@

            </div>
            <!-- /.col -->

            <div class="col-md-4">

                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title" style="font-weight:bold;">Student Distribution By Gender</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-tool" data-card-widget="remove">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <canvas id="genderPieChart" style="min-height: 215px; height: 215px; max-height: 215px; max-width: 100%;"></canvas>
                    </div>
                    <!-- /.card-body -->
                </div>
                

               @*  <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Active Now</h3>
                        <span class="badge badge-danger" id="userCount"></span>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body p-0">
                        <ul class="users-list clearfix">
                            <li>
                                <img src="/Files/noimage.png" alt="User Image">
                                <a class="users-list-name" href="#">Alexander Pierce</a>
                                <span class="users-list-date">Today</span>
                            </li>
                            <li>
                                <img src="/Files/noimage.png" alt="User Image">
                                <a class="users-list-name" href="#">Norman</a>
                                <span class="users-list-date">Yesterday</span>
                            </li>
                            <li>
                                <img src="/Files/noimage.png" alt="User Image">
                                <a class="users-list-name" href="#">Jane</a>
                                <span class="users-list-date">12 Jan</span>
                            </li>
                            <li>
                                <img src="/Files/noimage.png" alt="User Image">
                                <a class="users-list-name" href="#">John</a>
                                <span class="users-list-date">12 Jan</span>
                            </li>
                        </ul>
                        <!-- /.users-list -->
                    </div>
                    <!-- /.card-body -->
                    <div class="card-footer text-center">
                        <a href="javascript:">View All Online Users</a>
                    </div>
                    <!-- /.card-footer -->
                </div> *@

                <!-- Include your SignalR JavaScript code to update the user count -->
                <script src="your-signalr-script.js"></script>

                <!-- /.card -->

              @*   <div class="card">
                    <div class="card-header">
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                        <h3 class="card-title" style="font-weight:bold;">Recently Added Disciplinary Cases</h3>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body p-0">
                        <table class="table table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>Student</th>
                                    <th>Case</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>John Doe</td>
                                    <td>Fighting in the classroom</td>
                                    <td>Suspension</td>
                                </tr>
                                <tr>
                                    <td>Jane Smith</td>
                                    <td>Using inappropriate language</td>
                                    <td>Written warning</td>
                                </tr>
                                <tr>
                                    <td>Robert Johnson</td>
                                    <td>Disrupting class activities</td>
                                    <td>Detention</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer text-center">
            <a href="javascript:">View All Cases</a>
        </div>
                    <!-- /.card-body -->
                </div> *@
                <!-- /.card -->
            </div>

            <!-- /.col -->
        </div>
        
        @*<div class="col-md-12">
        <div class="row">
            <div class="col-md-3">
                <div class="sticky-top mb-3">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Draggable Events</h4>
                        </div>
                        <div class="card-body">
                            <!-- the events -->
                            <div id="external-events">
                                <div class="external-event bg-success">Lunch</div>
                                <div class="external-event bg-warning">Go home</div>
                                <div class="external-event bg-info">Do homework</div>
                                <div class="external-event bg-primary">Work on UI design</div>
                                <div class="external-event bg-danger">Sleep tight</div>
                                <div class="checkbox">
                                    <label for="drop-remove">
                                        <input type="checkbox" id="drop-remove">
                                        Remove after drop
                                    </label>
                                </div>
                            </div>
                        </div>
                        <!-- /.card-body -->
                    </div>
                    <!-- /.card -->
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Create Event</h3>
                        </div>
                        <div class="card-body">
                            <div class="btn-group" style="width: 100%; margin-bottom: 10px;">
                                <ul class="fc-color-picker nav nav-pills">
                                    <li class="nav-item"><a class="nav-link text-primary" href="#"><i class="fas fa-square"></i></a></li>
                                    <li class="nav-item"><a class="nav-link text-warning" href="#"><i class="fas fa-square"></i></a></li>
                                    <li class="nav-item"><a class="nav-link text-success" href="#"><i class="fas fa-square"></i></a></li>
                                    <li class="nav-item"><a class="nav-link text-danger" href="#"><i class="fas fa-square"></i></a></li>
                                    <li class="nav-item"><a class="nav-link text-muted" href="#"><i class="fas fa-square"></i></a></li>
                                </ul>
                            </div>
                            <!-- /btn-group -->
                            <div class="input-group">
                                <input id="new-event" type="text" class="form-control" placeholder="Event Title">
                                <div class="input-group-append">
                                    <button id="add-new-event" type="button" class="btn btn-primary">Add</button>
                                </div>
                                <!-- /btn-group -->
                            </div>
                            <!-- /input-group -->
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.col -->
            <div class="col-md-9">
                <div class="card card-primary">
                    <div class="card-body p-0">
                        <!-- THE CALENDAR -->
                        <div id="calendar"></div>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- /.col -->
        </div>
        </div>*@
        <!-- /.row -->
        <!-- /.row -->
    </div><!--/. container-fluid -->
</section>
@* <script src="~/js/signalr.js"></script>
<script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/StudentCountHub")
            .build();

        connection.on("UserCountChanged", function (userCount) {
            $("#userCount").text(userCount+' '+'Users Online');
            
        });
        connection.on("StudentCountChanged", function (StudentCount) {
            $("#StudentCount").text(StudentCount);
            });
            connection.on("TeacherCountChanged", function (TeacherCount) {
            $("#TeacherCount").text(TeacherCount);
            });
            connection.on("ParentCountChanged", function (ParentCount) {
            $("#ParentCount").text(ParentCount);
            });
        connection.start().then(function () {
            console.log("SignalR connection established.");
        });
    </script> *@
    <script src="~/js/Jquery.min.3.6.0"></script>
    <script src="~/lib/jquery/jquery.min.js"></script>
<script src="~/plugs/Chart.min.js"></script>

<script src="~/js/fullcalendar.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById('StudentPopulationByClass').getContext('2d');
        var classDistribution = @Html.Raw(classDistributionJson);
        var labels = classDistribution.map(function (item) { return item.Class; });
        var data = classDistribution.map(function (item) { return item.StudentCount; });

        console.log('classDistribution:', classDistribution);
        console.log('labels:', labels);
        console.log('data:', data);
        var barChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Student Count',
                    data: data,
                    backgroundColor: 'rgba(60,141,188,0.9)',
                    borderColor: 'rgba(60,141,188,0.8)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById('StudentPopulationByClassStream').getContext('2d');
        var studentData = @Html.Raw(TempData["ClassDistributionStream"]);
        var classFilter = document.getElementById('classFilter');

        function updateChart(classFilterValue) {
            var filteredData = studentData;
            var labels = [];
            var femaleCounts = [];
            var maleCounts = [];

            if (classFilterValue === 'all') {
                // Group by class and stream
                var groupedData = {};
                studentData.forEach(item => {
                    var key = `Senior ${item.Class} - ${item.StreamName}`;
                    if (!groupedData[key]) {
                        groupedData[key] = { F: 0, M: 0 };
                    }
                    groupedData[key][item.Gender] += item.GenderCount;
                });
                labels = Object.keys(groupedData);
                femaleCounts = labels.map(label => groupedData[label].F);
                maleCounts = labels.map(label => groupedData[label].M);
            } else {
                // Filter data for a specific class
                filteredData = studentData.filter(s => s.Class === parseInt(classFilterValue));
                labels = [...new Set(filteredData.map(item => item.StreamName))];
                femaleCounts = labels.map(label => filteredData
                    .filter(item => item.StreamName === label && item.Gender === 'F')
                    .reduce((sum, item) => sum + item.GenderCount, 0));
                maleCounts = labels.map(label => filteredData
                    .filter(item => item.StreamName === label && item.Gender === 'M')
                    .reduce((sum, item) => sum + item.GenderCount, 0));
            }

            var chartData = {
                labels: labels,
                datasets: [
                    {
                        label: 'Female',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        data: femaleCounts
                    },
                    {
                        label: 'Male',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        data: maleCounts
                    }
                ]
            };

            var options = {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            };

            if (window.myBar) {
                window.myBar.destroy();
            }

            window.myBar = new Chart(ctx, {
                type: 'bar',
                data: chartData,
                options: options
            });
        }

        classFilter.addEventListener('change', function () {
            updateChart(this.value);
        });

        updateChart('all');
    });
</script>
<script>
    <script>
        $(document).ready(function () {
            // Initialize FullCalendar
            $('#calendar').fullCalendar({
                // Set options
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                defaultView: 'month',
                editable: true,
                events: [
                    // Add your events here
                    {
                        title: 'Event 1',
                        start: '2023-06-20'
                    },
                    {
                        title: 'Event 2',
                        start: '2023-06-22',
                        end: '2023-06-24'
                    }
                ]
            });
        });
</script>
<script>
  $(function () {
    /* initialize the external events
     -----------------------------------------------------------------*/
    function ini_events(ele) {
      ele.each(function () {
        var eventObject = {
          title: $.trim($(this).text())
        }
        $(this).data('eventObject', eventObject)
        $(this).draggable({
          zIndex: 1070,
          revert: true,
          revertDuration: 0
        })
      })
    }
    ini_events($('#external-events div.external-event'))

    /* initialize the calendar
     -----------------------------------------------------------------*/
    var Calendar = FullCalendar.Calendar;
    var Draggable = FullCalendar.Draggable;

    var containerEl = document.getElementById('external-events');
    var checkbox = document.getElementById('drop-remove');
    var calendarEl = document.getElementById('calendar');

    var calendar = new Calendar(calendarEl, {
      headerToolbar: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      themeSystem: 'bootstrap',
      events: [
        {
          title: 'All Day Event',
          start: '2023-06-01',
          backgroundColor: '#f56954', //red
          borderColor: '#f56954' //red
        },
        {
          title: 'Long Event',
          start: '2023-06-15',
          end: '2023-06-18',
          backgroundColor: '#f39c12', //yellow
          borderColor: '#f39c12' //yellow
        },
        {
          title: 'Meeting',
          start: '2023-06-20T10:30:00',
          allDay: false,
          backgroundColor: '#0073b7', //Blue
          borderColor: '#0073b7' //Blue
        },
        {
          title: 'Lunch',
          start: '2023-06-20T12:00:00',
          end: '2023-06-20T14:00:00',
          allDay: false,
          backgroundColor: '#00c0ef', //Info (aqua)
          borderColor: '#00c0ef' //Info (aqua)
        },
        {
          title: 'Birthday Party',
          start: '2023-06-21T19:00:00',
          end: '2023-06-21T22:30:00',
          allDay: false,
          backgroundColor: '#00a65a', //Success (green)
          borderColor: '#00a65a' //Success (green)
        },
        {
          title: 'Click for Google',
          start: '2023-06-28',
          end: '2023-06-29',
          url: 'https://www.google.com/',
          backgroundColor: '#3c8dbc', //Primary (light-blue)
          borderColor: '#3c8dbc' //Primary (light-blue)
        }
      ],
      editable: true,
      droppable: true,
      drop: function (info) {
        if (checkbox.checked) {
          info.draggedEl.parentNode.removeChild(info.draggedEl);
        }
      }
    });

    calendar.render();

    /* ADDING EVENTS */
    var currColor = '#3c8dbc';

    $('#color-chooser > li > a').click(function (e) {
      e.preventDefault();
      currColor = $(this).css('color');
      $('#add-new-event').css({
        'background-color': currColor,
        'border-color': currColor
      });
    });

    $('#add-new-event').click(function (e) {
      e.preventDefault();
      var val = $('#new-event').val();
      if (val.length == 0) {
        return;
      }

      var event = $('<div />');
      event.css({
        'background-color': currColor,
        'border-color': currColor,
        'color': '#fff'
      }).addClass('external-event');
      event.text(val);
      $('#external-events').prepend(event);
      ini_events(event);
      $('#new-event').val('');
    });
  });
</script>
<script>
    $(function () {
        // Fetch data from the server (replace with your own data retrieval logic)
        const marksData = {
            seniorOne: [80, 85, 90],
            seniorTwo: [75, 78, 83],
            seniorThree: [82, 87, 88],
            seniorFour: [79, 84, 86],
            seniorFive: [88, 92, 91],
            seniorSix: [90, 89, 93]
        };

        // Process the data to create chart datasets
        const classes = Object.keys(marksData);
        const exams = ['EOT', 'BOT', 'MID'];
        const colors = ['rgba(0, 123, 255, 0.8)', 'rgba(220, 53, 69, 0.8)', 'rgba(40, 167, 69, 0.8)'];
        const datasets = exams.map((exam, index) => ({
            label: exam,
            data: classes.map(cls => marksData[cls][index]),
            backgroundColor: colors[index],
            borderColor: colors[index],
            borderWidth: 1
        }));

        // Create the bar chart
        const marksChart = new Chart($("#marksChart"), {
            type: 'bar',
            data: {
                labels: classes,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 10 // Adjust the step size as per your data range
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true
                        }
                    }
                }
            }

        });

        // Handle exam dropdown change event
        $("#examDropdown").on("change", function () {
            const selectedExam = $(this).val();
            const examIndex = exams.indexOf(selectedExam);

            // Update chart dataset based on selected exam
            marksChart.data.datasets.forEach((dataset, index) => {
                dataset.data = classes.map(cls => marksData[cls][examIndex]);
            });

            // Update the chart
            marksChart.update();
        });
    });
</script>
<script>
    $(document).ready(function () {
        var ctx = document.getElementById('genderPieChart').getContext('2d');
        var genderData = @Html.Raw(genderDistributionJson);
        var labels = genderData.map(function (item) { return item.Gender; });
        var data = genderData.map(function (item) { return item.GenderCount; });

        var genderPieChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: ['#f56954', '#00a65a']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: true,
                    position: 'top',
                }
            }
        });
    });
</script>





